2022-01-29: remove debug code

2022-01-29: While the main and mutation threads are joined,
keep VT100Screen.state exactly equal to
VT100Screen.mutableState. A bit of NSProxy magic ensures
that only interval tree doppelgangers are accessible through
.state and that iTermColorMap's delegate remains the mutable
state in state.colorMap.delegate. Clean up various other
odds and ends

2022-01-29: Pass resetOverflow to didSynchronize so it is
always called

2022-01-29: Oops, missed one line in the last commit

2022-01-29: Add some todos, add missing return

2022-01-27: Remove todo

2022-01-27: Delete PPC code

2022-01-27: When you do ED 2 (CSI 2 J) in alternate screen
when visible marks are present and the screen is empty (or
marks occur below the last non-empty line), scroll the marks
off the screen.

2022-01-27: Avoid updating untouched parts of the config

2022-01-27: Clean up some todos. Reuse triggers when
reloading profile when possible

2022-01-27: Create a general method for idempotent side
effects and use it for setNeedsRedraw and
intervalTreeVisibleRangeDidChange

2022-01-27: Remove todo, make needsRedraw nonatomic

2022-01-27: Remove todo

2022-01-27: Remove todos, don't try to handle token
injection on arbitrary queues

2022-01-27: Remove todos

2022-01-27: Make copying a temporary double buffer cheap
when it hasn't changed.

2022-01-27: Mark grid dirty when restoring

2022-01-27: Move animatedLines to VT100Screen to make
updating VT100ScreenState cheaper

2022-01-27: Make the mark cache track whether it's dirty so
syncing is cheap when it's unchanged

2022-01-27: Remove some todos that have been todone

2022-01-26: Remove dead code

2022-01-26: Avoid copying the colormap on sync. Instead,
mirror changes to the mutable colormap in the immutable one
in side-effects like we do for the interval tree. Refactor
some color-setting code to make it faster. Also fix a hang
on launch when concurrency is disabled.

2022-01-26: Use addPausedSideEffect in
VT100ScreenMutableState+TerminalDelegate

2022-01-26: Prevent reentrant setConfig:

Sync before and after nested joined side effects so that
changes to the colormap are reflected in the delegate's
copy.

Make setMutingAmount and setDimOnlyText be side-effect-free
when no change is made to avoid infinite recursion in
setConfig:.

2022-01-26: Fixes and performance improvements

Move throughput estimation to mutation thread.

Don't use AsciiData asynchronously: that's a USF. Intead,
make a copy before dispatching if logging is needed.

Change how updates from the mutation thread to the main
thread (for the purposes of changing cadence, setting
active, etc.) works. Bundle up info into
VT100ScreenTokenExecutorUpdate and send updates periodically
while input is being handled. The delegate interface in
TokenExecutor for these is also simplified to a single call.

Add maybeHasExpectations to iTermExpect since getting the
array of expectations is slow.

Add low-priority side-effects. They get quued to run but do
not cause an immediate dispatch to the main queue every
time. It uses a PeriodicScheduler to ensure they are
dispatched within 33 ms. This greatly improves performance.

Add PeriodicScheduler to help coalesce repeated operations.
This is similar to iTermRateLimitedUpdate but is quite a bit
simpler and works off the main thread.

Reduce calls to [NSDate date] during mutation since it is
slow.

Add various small optimizations to VT100Grid.

Coalesce calls to intervalTreeVisibleRangeDidChange.

Make performingJoinedBlock a class property to avoid
deadlock when performJoinedBlock is reentrant with two
different screens, as when detaching from tmux.

Avoid mutating nil interval tree objects. I am sad that
despite nullability annotations the compiler can't catch
this.

Avoid checking if termType contains screen on every token
because doing so is slow.

2022-01-25: Performance improvements

2022-01-25: Avoid calling logging side-effects or creating
strings while appending ascii data if they are not needed.

2022-01-25: Avoid repeatedly doing a slow check for CPU type

2022-01-25: Fix assert on launch

2022-01-25: Make trigger delegate callsbacks go through
TokenExecutor's scheduler when async to avoid unpausable
work accruing on the mutation queue.

Fix a data race - intervals were shared between the mutable
and derivative interval trees.

Improve MutableAtomicObject by adding a set method.

Prevent re-entrant side effects. I noticed you could get two
alerts from alert triggers at the same time because the
runloop allows events (which could kick off high-pri tasks,
which could themselves have side-effects) to run while the
main queue is blocked. This means side effects could
potentially run long after syncing state. Keep an eye out
for problems with this.

2022-01-25: Enable concurrent VT100ScreenState use/mutation
by advanced pref. Fix various data races and add assertions.

2022-01-25: Make triggers run deletate methods on the right
queue

2022-01-25: Port more of ScreenChar to Swift

2022-01-25: Port more of ScreenChar to Swift

2022-01-25: Move screenchar logic for complex strings into a
new class that allows concurrent access

2022-01-25: Make iTermImageInfoReading to isolate the
mutation points. The class was already designed to be used
concurrently, so this is just sugar.

2022-01-25: Move iTermTokenExecutorDelegate to
VT100ScreenMutableState

2022-01-25: Big cleanup.

* ARCify VT100WorkingDirectory, iTermImageInfo, iTermMark.
* Move code->iTermImageInfo map into a new class,
ImageRegistery.  * Make various classes immutable
(VT100RemoteHost, VT100WorkingDirectory,
iTermCapturedOutputMark, iTermImageMark) * Make LineBlock's
observers an ObjC array because it's impossible to reason
about object lifetimes in C++ data structures.  * Fix a leak
of metadata line copied line blocks.  * Fix use after
dealloc of _shell when replacing a terminated session.  *
Fix leak of VT100ScreenState in sync.  * Don't register
VT100ScreenMark doppelgangers.  * Fix oob write when
changing cusor type while it's in the overflow column * Fix
a race that made restoring images not always work (garbage
collected prematurely)

2022-01-25: Sure PTYTextView's colormap is up to date. Fix
various mis-uses of the interval tree and clean up the code,
renaming it to EventuallyConsistentIntervalTree.

2022-01-25: Checkpoint - everything is broken

2022-01-25: Move IntervalTree.h in project to be with its .m

2022-01-25: Delete dead code

2022-01-25: Move destructivelySetScreenWidth

2022-01-25: remove needless mutation wrapper

2022-01-25: Revert "Move destructivelySetScreenWidth, remove
silly setMayHaveDoubleWidthCharacters wrapper"

This reverts commit
11c06608b4a307d964ed92409f3bd3ed3105a3d9.

2022-01-25: Move destructivelySetScreenWidth, remove silly
setMayHaveDoubleWidthCharacters wrapper

2022-01-25: Move periodic trigger checks (partial line) into
sync

2022-01-25: Remove mutInjectData and delete dead code

2022-01-25: Remove mutGetAndResetHasScrolled

2022-01-25: Move setMaxScrollbackLines

2022-01-25: Delete dead code

2022-01-25: Fix a bug where horizontal cursor movement
didn't cause a redraw.

Fix a bug where the 'reduce flicker' setting was ignored.

Improve the API for double buffering and make it work again.

Fix a bug where tokenExecutorDidHandleInput was called if
there were side-effects but no tokens handled.

Make VT100ScreenState the double-buffer's delegate instead
of VT100Screen.

Tell VT100ScreenState what queue it should be used on so it
can tell the double buffer where to run its timer.

Extend iTermGCDTimer to accept a queue.

2022-01-25: Remove dirty modification from cursor-change
pathway

2022-01-25: Simplify dirty handling in preparation for
making a copy of state

2022-01-25: Get rid of getLineAtScreenIndex

2022-01-25: Move unlimitedScrollback flag to screen state

2022-01-25: Clean up syncing

2022-01-25: Remove dead code

2022-01-25: Move saveToScrollbackInAlternateScreen to screen
config

2022-01-25: Remove dead code

2022-01-25: Move appendToScrollbackWithStatusBar to screen
config

2022-01-25: Delete dead code

2022-01-25: Move normalization to screen config

2022-01-25: Remove mutSetIntervalTreeObserver

2022-01-25: Remove mutSetDelegate

2022-01-25: Remove dead code

2022-01-25: Remove mutSetShouldExpectPromptMarks

2022-01-25: Remove mutScheduleTokenExecution

2022-01-25: Remove dead code

2022-01-25: Remove mutSetExited

2022-01-25: Use joined threads to set dimming amount

2022-01-25: Move muting amount to screen config

2022-01-25: Move minimum contrast to screen config

2022-01-25: Fix some things I missed in the last commit

2022-01-25: Move useSeparateColorsForLightAndDarkMode to
screen config

2022-01-25: Move darkMode to screen config

2022-01-25: Move dimOnlyText to screen config

2022-01-25: Remove mutLoadInitialColorTable

2022-01-25: Remove
mutRestorePreferredCursorPositionIfPossible

2022-01-25: Move find on page state back into VT100Screen.
Move logic into a category.

2022-01-25: Move mutSetFromFrame

2022-01-25: Remove dead code

2022-01-25: Remove mutLineFeed

2022-01-25: Move mutCrlf

2022-01-25: Move
mutNumberOfLinesDroppedWhenEncodingContentsIncludingGrid

2022-01-25: Move mutSetAltScreen

2022-01-25: Move motSetHistory

2022-01-25: Move more resizing code to
VT100ScreenMutableState

2022-01-25: Remove mutAppendScreenChars

2022-01-25: Remove mutAppendStringAtCursor

2022-01-25: Move mutRemoveLastLine

2022-01-25: Remove mutResetTimestamps

2022-01-25: Remove mutClearScrollbackBuffer and
VT100Screen.clearScrollbackBuffer

2022-01-25: Delete dead code

2022-01-25: Delete dead code

2022-01-25: Remove mutClearBuffer and delete dead code

2022-01-25: Move remove mutRemoveAnnotation

2022-01-25: remove dead code

2022-01-25: Move state restoration code

2022-01-25: Wrap addNoteAtCursor with joined threads to
avoid racing w/r/t cursor position

2022-01-25: Remove mutAddNote:

2022-01-25: Remove mutClearFromAbsoluteLineToEnd

2022-01-25: Delete terminal delegate code from VT100Screen,
fix up various inappropriate uses of it

2022-01-25: Remove mutAddMarkStartingAtAbsoluteLine

2022-01-25: Remove mutSetWorkingDirectory

2022-01-25: Remove mutAddNoteWithText:inAbsoluteRnage:

2022-01-25: Add mutateAsynchronously to modify
VT100ScreenMutableState but without blocking until it's done
with its current token. Use it for command-end inference
(useful with trigger-detected prompts).

2022-01-25: Remove dead code

2022-01-25: Remove VT100Screen.terminal. Hurray!!!

2022-01-25: Make sgrCodesForCharacter a class method

2022-01-25: Add terminal state dictionary to
VT100ScreenState so that encoding restoration state doesn't
require using terminal directly. This might be slow.

2022-01-25: Make encoding screen contents use joined threads
to avoid accessing the terminal directly

2022-01-25: Add terminalCharset

2022-01-25: remove terminal from PTYTextView0DataSource

2022-01-25: Use _screen.terminalBracketedPasteMode

2022-01-25: Remove dead code. Goodbye PTYSession.terminal!

2022-01-25: Make resetCharset use joined threads

2022-01-25: Make applescript get answerback string from
profile, not terminal

2022-01-25: Fix return type of
tryToFinishAttachingToMultiserverWithPartialAttachment.

Begin tmux recovery mode in the parser before registering
with tasknotifier so input can be handled correctly as soon
as it arrives. If the session won't actually be a tmux
gateway because we failed to attach to a runnign server,
cancel tmux recovery mode right away.

Pause the token executor before enabling the terminal so
initial setup can complete before the first token is
executed.

Fix a bug in how VT100TmuxParser ignored its first line of
input in recovery mode.

2022-01-25: Use joined threads to reset send modifiers when
restoring an session not attached to a server

2022-01-25: Make naggingControllerDisableBracketedPasteMode
use joined threads

2022-01-25: Use joined thread when permanently disabling
mouse reporting

2022-01-25: Call stopReceivingFile in joined threasd

2022-01-25: Use joined threads in
offerToTurnOffFocusReportingOnHostChange

2022-01-25: Use joined threads when handling response to
turning off mouse reporting announcement

2022-01-25: Use joined threads in
maybeTurnOffPasteBracketing and
maybeResetTerminalStateOnHostChange and setHost:user:

2022-01-25: Add terminalMetaSendsEscape

2022-01-25: Add terminalReceivingFile

2022-01-25: Move mutSetTmuxState

2022-01-25: Fix more terminalBracketedPasteMode that I
missed

2022-01-25: Make printTmuxMessage use joined threads

2022-01-25: Make textViewResetTerminal use joined threads

2022-01-25: Make textViewToggleTerminalStateForMenuItem use
joined threads

2022-01-25: Fix a missed terminalBracketedPasteMode

2022-01-25: Fix a bug where Always and Never didn't work in
the annoucement for paste bracketing oopsies

2022-01-25: Add terminalBracketedPasteMode

2022-01-25: Make tmuxHostDisconnected go through a joined
thread. I removed the dispatch to the tmux queue because
joining the parsing queue is simpler and should be just as
safe. The only risk is that it somehow gets ordered before
some writes on the tmux queue, but I don't think it'll be a
problem because those clients get shut down and the writes
will just fail with a broken pipe.

2022-01-25: Move setTmuxMode into joined thread. Disable
focus reporting for tmux gateway

2022-01-25: Use terminalReportFocus instead of
terminal.reportFocus

2022-01-25: Make terminalFileShouldStop use terminal in a
joined thread

2022-01-25: Make setEncoding use the existing mutable
terminal

2022-01-25: Make setTermVariable use existing mutable
terminal

2022-01-25: Do setPreferencesFromAddressBookEntry in a
joined block

2022-01-25: Remove
VT100Screen.appendNativeImageAtCursorWithName

2022-01-25: Make appendBrokenPipeMessage use joined threads

2022-01-25: Move VT100Screen.terminate into joined block

2022-01-25: Add missing commas

2022-01-25: Fix copying of VT100Grid and various warnings.
Proxy colormap delegate through VT100ScreenMutableState and
make PTYSession's delegate calls take an immutable colormap
and run as a side-effect

2022-01-25: Expose VT100Terminal's state through VT100Screen
readonly properties

2022-01-25: Move threadedReadTask to VT100ScreenMutableState

2022-01-25: Move ownership of echoProbe to
VT100ScreenMutableState

2022-01-25: Move ownership of terminal from PTYSession to
VT100ScreenMutableState

2022-01-25: Move misplaced methods

2022-01-25: Move terminalSoftAlternateScreenModeDidChange

2022-01-25: Move terminalPasteboardReceiptEndedUnexpectedly

2022-01-25: Move terminalRequestUpload

2022-01-25: Move terminalDidFinishReceivingFile

2022-01-25: Move terminalKeyReportingFlagsDidChange

2022-01-25: Move terminalDidChangeSendModifiers

2022-01-25: Remove dead code

2022-01-25: Move terminalNeedsRedraw

2022-01-25: Move terminalSetCharset

2022-01-25: Move terminalWillStart/EndLinkWithCode

2022-01-25: Move terminalProtectedMode

2022-01-25: Move terminalProtectedModeDidChangeTo

2022-01-25: Move terminalSelectiveEraseInLine

2022-01-25: Move terminalSelectiveEraseInDisplay

2022-01-25: Move terminalSelectiveEraseRectangle

2022-01-25: Move terminalEraseRectangle

2022-01-25: Move terminalFillRectangle

2022-01-25: Move terminalCopyFrom

2022-01-25: Move toggleAttribute

2022-01-25: Move terminalSetAttribute

2022-01-25: Move terminalDeleteColumns

2022-01-25: Fix warning

2022-01-25: Move terminalInsertColumns

2022-01-25: Move terminalMaximumTheoreticalImageDimension

2022-01-25: Move terminalRestoreColorsFromSlot

2022-01-25: Move terminalSavedColorsSlot

2022-01-25: Move terminalApplicationKeypadModeDidChange

2022-01-25: Move terminalStringForKeypressWithCode

2022-01-25: Move terminalLeftRightRegionString

2022-01-25: Move terminalTopBottomRegionString

2022-01-25: Move terminalIsInAlternateScreenMode

2022-01-25: Move terminalReportKeyUpDidChange

2022-01-25: Move 00~terminalPasteBracketingWillChangeTo01~

2022-01-25: Move terminalReportFocusWillChangeTo

2022-01-25: Move terminalRepeatPreviousCharacter

2022-01-25: Move terminalCustomEscapeSequenceWithParameters

2022-01-25: Move terminalSetColorNamed

2022-01-25: Move terminalPushKeyLabels and
terminalPopKeyLabels

2022-01-25: Move terminalSetLabel

2022-01-25: Move terminalUnicodeVersion

2022-01-25: Move terminalSetUnicodeVersion

2022-01-25: Move terminalCellSizeInPoints

2022-01-25: Move VT100TerminalDelegate impl to category

2022-01-25: Move file download stuff to
VT100ScreenMutableState

2022-01-25: Move terminalSGRCodesInRectangle

2022-01-25: Move terminalScrollRegion

2022-01-25: Add terminalProfileName

2022-01-25: Move terminalChecksumInRectangle

2022-01-25: Move terminalInsertModeDidChangeTo

2022-01-25: Move terminalTypeDidChange

2022-01-25: Move terminalWraparoundModeDidChangeTo

2022-01-25: Move terminalSetShellIntegrationVersion

2022-01-25: Move terminalFinalTermCommand

2022-01-25: Move terminalReturnCodeOfLastCommandWas

2022-01-25: Move a bunch of unimplemented finalterm delegate
methods

2022-01-25: Move terminalAbortCommand

2022-01-25: Make _commandRangeChangeJoiner use the token
executor as its scheduler so the delegate call can run as a
side-effect so that it'll be run before a joined block

2022-01-25: Move terminalCommandDidEnd

2022-01-25: Move terminalCommandDidStart

2022-01-25: Move terminalSetTabStops

2022-01-25: Move terminalTabStops

2022-01-25: Move terminalPromptDidStart

2022-01-25: Sync before running side effects

2022-01-25: Move terminalSetHighlightCursorLine and
terminalClearCapturedOutput. Also change joined blocks to
sync before and after the block

2022-01-25: Move terminalSetCursorVisible

2022-01-25: Move terminalWillAutoWrap

2022-01-25: Move terminalCursorX and terminalCursorY

2022-01-25: Move terminalColorForIndex

2022-01-25: Move terminalCursorVisible

2022-01-25: Move terminalFocusReportingAllowed

2022-01-25: Move terminal delegate methods for setting
colors. This made various problems in joined-thread running
apparent, and it was generally cleaned up and made saner and
more correct.

2022-01-25: Move terminalSetUserVar

2022-01-25: Move terminalSetBadgeFormat

2022-01-25: Move terminalSetBackgroundImageFile

2022-01-25: Move erminalDisinterSession

2022-01-25: Move terminalRequestAttention

2022-01-25: Move terminalCanUseDECRQCRA

2022-01-25: Move terminalIsTrusted

2022-01-25: Move terminalSetPasteboard,
terminalAppendDataToPasteboard,
terminalCopyBufferToPasteboard

2022-01-25: Move terminalAddNote

2022-01-25: Move terminalProfileShouldChangeTo

2022-01-25: Move terminalClearBuffer

2022-01-25: Move terminalClearScrollbackBuffer

2022-01-25: Move terminalSetProxyIcon

2022-01-25: Move terminalStealFocus

2022-01-25: Move terminalSaveScrollPositionWithArgument

2022-01-25: Move terminalClearScreen

2022-01-25: Move terminalSetWorkingDirectoryURL and
terminalCurrentDirectoryDidChangeTo

2022-01-25: Move terminalSetRemoteHost. Delete dead code.
Reindent stuff at xcode's whim

2022-01-25: Move terminalShowPrimaryBuffer

2022-01-25: Move terminalIsShowingAltBuffer

2022-01-25: Move terminalUseColumnScrollRegion

2022-01-25: Move code to show alt screen to
VT100ScreenMutableState. This forces it to become
VT100GridDelegate and to pull in some state restoration
code.

2022-01-25: Avoid calling
VT100GridDelegate.gridSizeDidChange during initialization

2022-01-25: Move terminalMouseModeDidChangeTo

2022-01-25: Move terminalWidth/Height

2022-01-25: Move terminalSynchronizedUpdate and fix test

2022-01-25: Move terminalHandleTmuxInput

2022-01-25: Move terminalStartTmuxModeWithDCSIdentifier

2022-01-25: Move terminalPostUserNotification

2022-01-25: Move terminalPush/PopCurrentTitleForWindow

2022-01-25: Move terminalWindowTitle, fix terminalIconTitle
to respect allowTitleReporting and terminalIsTrusted

2022-01-25: Move terminalIconTitle

2022-01-25: Move terminalScreenHeightInCells,
terminalScreenWidthInCells

2022-01-25: Move terminalWindowWidth/HeightInPixels

2022-01-25: Move terminalWindowTopLeftPixelCoordinate

2022-01-25: Move terminalWindowIsMiniaturized

2022-01-25: Move terminalScrollUp

2022-01-25: Move terminalScrollDown

2022-01-25: Move terminalRaise

2022-01-25: Move terminalMiniaturize

2022-01-25: Move terminalMoveWindowTopLeftPointTo

2022-01-25: Move terminalSetPixelWidth:height: to
VT100ScreenMutableState

2022-01-25: Move terminalDeleteCharactersAtCursor to
VT100ScreenMutableState

2022-01-25: Move terminalDeleteCharactersAtCursor to
VT100ScreenMutableState

2022-01-25: Move terminalInsertBlankLinesAfterCursor to
VT100ScreenMutableState

2022-01-25: Move terminalShiftRight to
VT100ScreenMutableState

2022-01-25: Move terminalShiftLeft to
VT100ScreenMutableState

2022-01-25: Move terminalSetRows:andColumns: to
VT100ScreenMutableState

2022-01-25: Move terminalInsertEmptyCharsAtCursor to
VT100ScreenMutableState

2022-01-25: Move terminalDidFinishReceivingPasteboard to
VT100ScreenMutableState. Also clear the pasteboard before
putting a string on it

2022-01-25: Move begin/append copy to clipboard to
VT100ScreenMutableState

2022-01-25: Move terminalPasteString to
VT100ScreenMutableState. Also make navigating to prefs
easier when copying is disallowed

2022-01-25: Handle newlines in icon titles correctly (do not
include in title, since it should delimit the subtitle)

2022-01-25: Move terminalSetSubtitle to
VT100ScreenMutableState

2022-01-25: Move terminalSetIconTitle to
VT100ScreenMutableState

2022-01-25: Reorder setting delegates to avoid having a
token executor without a delegate after restoring a closed
session. Nil out the token executor when removing the
terminal.

2022-01-25: Move terminalSetWindowTitle to
VT100ScreenMutableState

2022-01-25: Move the rest of printing code to
VT100ScreenMutableState

2022-01-25: Move printing code to VT100ScreenMutableState

2022-01-25: Move terminalEraseCharactersAfterCursor to
VT100ScreenMutableState

2022-01-25: Move terminalAdvanceCursorPastLastColumn to
VT100ScreenMutableState

2022-01-25: Move terminalBackTab to VT100ScreenMutableState

2022-01-25: Move terminalRemoveTabStopAtCursor to
VT100ScreenMutableState

2022-01-25: Update terminal-originated resizing and all
resetting to be parallelizable. To accomplish this we
introduce joining, where the main thread and mutation thread
can be safely mutated synchronously - effectively a critical
region.

2022-01-25: Move API for resizing to
VT100ScreenMutableState+Resizing

2022-01-25: Move reallySetSize to
VT100ScreenMutableState+Resizing. Also move
compactLineDumpWithHistoryAndContinuationMarksAndLineNumbers
to VT100ScreenState

2022-01-25: Move didResizeToSize to
VT100ScreenMutableState+Resizing

2022-01-25: Move updateAlternateScreenIntervalTreeForNewSize
to VT100ScreenMutableState+Resizing

2022-01-25: Move
subSelectionsAfterRestoringPrimaryGridWithCopyOfAltGrid to
VT100ScreenMutableState+Resizing

2022-01-25: Move subSelectionsForNewSize to
VT100ScreenMutableState+Resizing

2022-01-25: Move addObjectsToIntervalTreeFromTuples to
VT100ScreenMutableState+Resizing

2022-01-25: Move computeRangeFromOriginalLimit to
VT100ScreenMutableState+Resizing

2022-01-25: Move restorePrimaryGridWithLineBuffer to
VT100ScreenMutableState+Resizing

2022-01-25: Move fixUpPrimaryGridIntervalTreeForNewSize to
VT100ScreenMutableState+Resizing

2022-01-25: Move replacementIntervalTreeForNewWidth to
VT100ScreenMutableState+Resizing

2022-01-25: Move
subSelectionsWithConvertedRangesFromSelection to
VT100ScreenMutableState+Resizing

2022-01-25: Move convertRange to
VT100ScreenMutableState+Resizing

2022-01-25: Move prepareToResizeInAlternateScreenMode to
VT100ScreenMutableState+Resizing

2022-01-25: Fix jobs tool showing pid 0 when session is
terminated and not getting the new pid when it is restarted

2022-01-25: Move mutSwapNotes to VT100ScreenMutableState

2022-01-25: Move intervalTreeObjectsWithUsedHeight to
VT100ScreenMutableState+Resizing

2022-01-25: Move intervalTreeObjectMayBeEmpty to
VT100ScreenMutableState+Resizing

2022-01-25: Move subSelectionTuplesWithUsedHeight to
VT100ScreenMutableState+Resizing

2022-01-25: Move positionRangeForCoordRange to
VT100ScreenMutableState+Resizing

2022-01-25: Move trimSelectionFromStart to
VT100ScreenMutableState+Resizing

2022-01-25: Move runByTrimmingNullsFromRun to
VT100ScreenMutableState+Resizing

2022-01-25: Move appendScreenToScrollback to
VT100ScreenMutableState+Resizing

2022-01-25: Use mutableState from
performBlockWithJoinedThreads in reallySetSize

2022-01-25: Pass VT100ScreenMutableState to
performBlockWithJoinedThreads block

2022-01-25: Move willSetSizeWithSelection to
VT100ScreenMutableState

2022-01-25: Implement performBlockWithJoinedThreads, use it
in resizing code.

2022-01-25: Move interval sanity checks to
VT100ScreenMutableState+Resizing

2022-01-25: Move call to screenRangeOfVisibleLines out of
VT100Screen+Resizing

2022-01-25: Move shouldSetSizeTo to VT100ScreenMutableState

2022-01-25: Move commandDidEndWithRange to
VT100ScreenMutableState

2022-01-25: Introduce resizing category on
VT100ScreenMutableState

2022-01-25: Move terminalRemoveTabStops to
VT100ScreenMutableState

2022-01-25: Move terminalLineDrawingFlagForCharset to
VT100ScreenMutableState

2022-01-25: Make changes to cursor type and blink pause
token execution so reports will be consistent

2022-01-25: Move terminalResetCursorTypeAndBlink to
VT100ScreenMutableState

2022-01-25: Move terminalGetCursorInfoWithCompletion to
VT100ScreenMutableState

2022-01-25: Move terminalCursorIsBlinking to
VT100ScreenMutableState. Make its result a promise we can
asynchronously check if the cursor is blinking

2022-01-25: Move terminalSetCursorBlinking to
VT100ScreenMutableState

2022-01-25: Move terminalSetCursorType to
VT100ScreenMutableState

2022-01-25: Move code for resetting the terminal into
VT100ScreenMutableState

2022-01-25: Move terminalForwardIndex and terminalBackIndex
to VT100ScreenMutableState

2022-01-25: Move terminalReverseIndex to
VT100ScreenMutableState

2022-01-25: Move terminalSetTabStopAtCursor to
VT100ScreenMutableState

2022-01-25: Move terminalEraseLineBeforeCursor:after: to
VT100ScreenMutableState

2022-01-25: Move terminalEraseInDisplayBeforeCursor to
VT100ScreenMutableState

2022-01-25: Move a bunch of code for erasing things into
VT100ScreenMutableSTate

2022-01-25: Move terminalSetScrollRegionTop:bottom: to
VT100ScreenMutableState

2022-01-25: Move terminalRelativeCursorX and
terminalRelativeCursorY to VT100ScreenMutableState

2022-01-25: Move terminalShowTestPattern to
VT100ScreenMutableState

2022-01-25: move terminalSendReport to
VT100ScreenMutableState

2022-01-25: Move terminalReportVariableNamed to
VT100ScreenMutableState and combine various delegate APIs to
reduce round trips across threads

2022-01-25: Revert "Move terminalShouldREportVariable to
VT100ScreenMutableState"

This reverts commit
76b3bf7efb74e22a233f910700de1bbc8c59caab.

2022-01-25: Move terminalShouldREportVariable to
VT100ScreenMutableState

2022-01-25: Move terminalShouldSendReport to
VT100ScreenMutableState

2022-01-25: Move terminalMoveCursorToX:y: to
VT100ScreenMutableState

2022-01-25: Move terminalCursorUp to VT100ScreenMutableState

2022-01-25: Fix warnigns

2022-01-25: Move terminalCursorRight to
VT100ScreenMutableState

2022-01-25: Move terminalCursorDown to
VT100ScreenMutableState

2022-01-25: Move cursorLeft to VT100ScreenMutableState

2022-01-25: Move tab and linefeed to
VT100ScreenMutableState, and fix publishing for filters
which used freed memory

2022-01-25: Move terminalBackspace to
VT100ScreenMutableState

2022-01-25: Move terminalRingBell to VT100SCreenMutableSTate

2022-01-25: Move terminalAppendAsciiData to
VT100ScreenMutableState

2022-01-25: Unbreak plaintext logging. Move
terminalAppendString to VT100Screen+MutableState which is
starting to implement VT100TerminalDelegate

2022-01-25: Move trigger evaluation into
VT100ScreenMutableState

2022-01-25: Pause token execution for invoke trigger and
evaluating interpolated strings

2022-01-25: Make VT100ScreenMutableState implement
triggerSession methods

2022-01-25: Move ownership of token executor to
VT100ScreenMutableState. Make changing remotehost pause
token execution so APS has a chance to run before any more
tokens are parsed.

2022-01-25: Refactor token execution into TokenExecutor. It
adds 'pausing' as a feature, which lets the mutation queue
stop handling new tokens until a trigger's side effects are
complete. For example, when the remote host changes we want
automatic profile switching to run before handling the next
token (which might cause different triggers to run if the
profile changes)

2022-01-25: Eliminate Trigger from CapturedOutput. Serialize
its command as a string. This does break state restoration
for captured output commands, unfortunately.

2022-01-25: Make VT100ScreenMutableState conform to
iTermTriggerScopeProvider

2022-01-25: Make VT100ScreenMutableState conform to
iTermTriggerSession. For now it's just an adapter to
PTYSession where the real impl is.

2022-01-25: PTYTriggerEvaluatorDataSource shouldn't derived
form PTYTextViewDataSource because it's freaking huge.
Define a narrowly tailored protocol instead.

2022-01-25: Move -PTYTriggerEvaluatorDelegate to
VT100ScreenMutableState

2022-01-25: Split out
triggerSideEffectCurrentDirectoryDidChange

2022-01-25: Add missing method to header

2022-01-25: Fix nullability annotations in
VT100ScreenDelegate.h

2022-01-25: Add enableTriggersInInteractiveApps to
VT100ScreenConfiguration. It'll be needed later when trigger
evaluation happens in VT100ScreenMutableState

2022-01-25: Move append methods to VT100ScreenMutableState

2022-01-25: Move softAlternateScreenModeDidChange to
VT100ScreenMutableState

2022-01-25: Move stringLineAsStringAtAbsoluteLineNumber to
VT100ScreenMutableState

2022-01-25: Move getLineAtIndex and
getLineAtIndex:withBuffer to VT100ScreenMutableState

2022-01-25: Move linkTextInRange to VT100ScreenMutableState

2022-01-25: Move highlightTextInRange to
VT100ScreenMutableState

2022-01-25: Split out setReturnCodeOfLastCommand

2022-01-25: Move saveCursorLine to VT100ScreenMutableState

2022-01-25: Move highlightRun to VT100ScreenMutableState

2022-01-25: Move linkRun:withURLCode to
VT100ScreenMutableState

2022-01-25: Move mutSetCommandStartCoord to
VT100ScreenMutableState

2022-01-25: Move mutAddNote:inRange:focus to
VT100ScreenMutableState

2022-01-25: Move comment

2022-01-25: Make trigger evaluator not depend on nagging
controller

2022-01-25: Remove dead code

2022-01-25: Split out
triggerSideEffectSetValue:forVariableNamed:

2022-01-25: Split out triggerSideEffectInvokeFunctionCall

2022-01-25: Split out triggerSideEffectSetTitle

2022-01-25: implement triggerSideEffectVariableScope

2022-01-25: Split out triggerWriteTextWithoutBroadcasting

2022-01-25: Split out
triggerSideEffectRunBackgroundCommand:pool:

2022-01-25: Split out
triggerSideEffectOpenPasswordManagerToAccountName

2022-01-25: Split out triggerSideEffectStopScrollingAtLine

2022-01-25: Split out
triggerSideEffectPostUserNotificationWithMessage

2022-01-25: Split out triggerSideEffectMakeFirstResponder

2022-01-25: Split out
triggerSideEffectLaunchCoprocessWithCommand

2022-01-25: Split triggerSideEffectDidCaptureOutput out

2022-01-25: Move guts of
triggerSessionShowShellIntegrationRequiredAnnouncement to
triggerSideEffectShowShellIntegrationRequiredAnnouncement

2022-01-25: Remove unneeded protocol method

2022-01-25: Implement
triggerSideEffectShowCapturedOutputToolNotVisibleAnnouncementIfNeeded

2022-01-25: Implement triggerSideEffectRingBell

2022-01-25: Remove triggerSideEffectReveal from protocol,
not used any mroe

2022-01-25: Delete dead reveal-session-for-triggers code

2022-01-25: Add iTermTriggerSideEffectExecutor and begin
implementing its methods

2022-01-25: Update iTermExpect to work in a mutation-thread
world. See notes in iTermExpect.h for how it is meant to be
used.

2022-01-25: Make iTermURLStore thread-safe and fix how it
encodes refcounts to use secure coding properly

2022-01-25: Indentation fix

2022-01-25: Make lastRemoteHost a protocol

2022-01-25: Move some code around to match move_triggers
branch

2022-01-25: Fix call to screenCurrentHostDidChange on
restoration to occur after interval tree deserialization. It
was done weirdly early for a reason that is no longer valid
- that you'd get a warning about mouse reporting being left
on. That is not a problem because the previous remote host
is nil.

2022-01-25: Move code to set remote host into
VT100ScreenMutableState.

2022-01-25: Remove dead code

2022-01-25: Fix wrong directory used when fetching working
directory after getting an empty path (although I doubt this
code is actually reached in production - I had to use a
weird OSC 7 url to reproduce it)

2022-01-25: Move code to set the current working directory
into VT100ScreenMutableState

2022-01-25: Fix return value of SetUserVariableTrigger so it
doesn't stop evaluation

2022-01-25: Indentation fix

2022-01-25: Indentation fix

2022-01-25: Move trigger command running to triggerSession
delegate to facilitate moving trigger evaluation off the
main thread

2022-01-25: Indentation fix

2022-01-25: Indentation fix

2022-01-25: Move alert rate limiting into trigger session
since rate limits must be used only on the main thread.

2022-01-25: Simplify triggerSession methods for captured
output announcement

2022-01-25: Update annotation trigger's delegate API to
split creating the annotation (which can be done on the
mutation thread) from setting its value (which must be done
on the main thread).

2022-01-25: Move alert-showing logic into
iTermTriggerSession method

2022-01-25: Expose iTermPromise.hasValue

2022-01-25: Use scope provider interface in triggers. This
will be useful when we have to switch threads to access
scope.

2022-01-25: Make iTermExpectation possible to use in a world
with a mutation thread. The mutation thread will use a copy
and reflect changes back to the main thread.

2022-01-25: Make trigger parameter resolution use a promise
instead of a completion block

2022-01-25: Get rid of unsafe array of strings in trigger's
performAction method

2022-01-25: Various improvements to iTermPromise: make it
thread-safe, implement -isEqual: and -hash:, assert that
notification happens at most once, assert seals are
fullfilled/rejected before dealloc, add -hasValue, make the
seal retain the promise.

2022-01-25: Move commandRange into VT100ScreenMutableState
and call screenCommandDidChangeWithRange asynchronously

2022-01-25: Move commandRange to VT100ScreenMutableState

2022-01-25: Move promptDidStartAt to VT100ScreenMutableState

2022-01-25: Move setPromptStartLine to
VT100ScreenMutableState

2022-01-25: Move didUpdatePromptLocation to
VT100ScreenMutableState

2022-01-25: Move addMarkOnLine:ofClass: to
VT100ScreenMutableState

2022-01-25: Move addMarkStartingAtAbsoluteLine to
VT100ScreenMutableState

2022-01-25: Move screen config into mutable state

2022-01-25: Replace totalScrollbackOverflow with
cumulativeScrollbackOverflow in mutation paths

2022-01-25: Move removeAnnotation to VT100ScreenMutableState

2022-01-25: Make removing an interval tree object's observer
call a side effect. Fix a bug where it wasn't actually
removed from the minimap because the entry got nilled before
use (yikes)

2022-01-25: Move setNeedsRedraw to VT100ScreenMutableState

2022-01-25: Make it possible to call interval tree observer
methods as a side-effect.

2022-01-25: Move the 1-arg version of
intervalForGridCoordRange to VT100ScreenState

2022-01-25: Move intervalForGridCoordRange:width:linesOffset
to VT100ScreenState

2022-01-25: Move numberOfLines to VT100ScreenState

2022-01-25: Move assignCurrentCommandEndDate to
VT100ScreenMutableState

2022-01-25: Move lastCommandMark to VT100ScreenState

2022-01-25: Move lineNumberRangeOfInterval to
VT100ScreenState

2022-01-25: Move coordRangeForInterval: to VT100ScreenState

2022-01-25: Move -width and -height to VT100ScreenState

2022-01-25: Change some uses of _state to _mutableState in
the mutation category

2022-01-25: Move crlf to VT100ScreenMutableState

2022-01-25: Move appendLineFeed to VT100ScreenMutableState

2022-01-25: Make removing the selection upon scrolling in
alternate screen mode when not appending to history into a
side-effect

2022-01-25: Refactor side effect performing into
VT100ScreenMutableState so it can call it directly

2022-01-25: Eliminate -mutableCurrentGrid

2022-01-25: Make calls to self.cursorX go through
VT100ScreenState

2022-01-25: Make calls to cursorY go through
VT100ScreenState

2022-01-25: Make VT100Screen and its categories access
cumulativeScrollbackOverflow from the correct state variable
instead of self.totalScrollbackOverflow

2022-01-25: Move numberOfScrollbackLines to VT100ScreenState

2022-01-25: Move incrementOverflowBy: to
VT100ScreenMutableState.m

2022-01-25: Fix a bug where the marks minimap wasn't
initialized for new sessions and the minimap wouldn't show
up until the window got resized

2022-01-25: Split VT100ScreenMutableState into a separate
file

2022-01-25: Refactor VT100ScreenState to begin moving logic
into it

2022-01-25: Fix some warnings, prefix all todo warnings with
TODO:

2021-12-31: Allow requesting speech recognition permission
(#456)


2021-12-27: Refactor triggers code to move evaluation into
its own class and action performing into PTYSession as a
delegate of the trigger evaluator. This is in preparation
for moving trigger evaluation into PTYSession and eventually
into the mutation thread.

2021-12-27: move use of delegate in
mutClearBufferSavingPrompt to side effect

2021-12-27: Reduce duplicate screenNeedsRedraw calls. Make
annotation removal use it

2021-12-27: Fix bugs related to removing annotations.
PTYNoteViewController must be removed from _notes when a
PTYAnnotation is removed from the interval tree. This can
happen if it goes out of range or the buffer is cleared.
Also, make PTYTextView.alphaValue=1 when annotations are
visible. I have no idea why they ever worked - macOS was
drawing subviews of an alpha=0 view.

2021-12-26: Various UI improvements for annotations: use a
better 'delete' icon; make the window grow when the text
view grows; confirm deletions.

2021-12-26: Break PTYAnnotation out of
PTYNoteViewController. It is the model object and belongs to
the interval tree. The view controller is its delegate.
PTYTextView owns the VCs while the IntervalTree owns the
models. PTYTextView is the delegate of
PTYNoteViewController.

2021-12-26: Move PTYNoteViewController.h to be with its .m
in the project file

2021-12-26: Move screenLogWorkingDirectoryAtLine to a
side-effect

2021-12-24: Make call to
screenGetWorkingDirectoryWithCompletion into a side-effect

2021-12-24: Move screenCommandDidEndWithRange partially into
the mutation path and make the rest a side-effect

2021-12-23: Move commandInRange and haveCommandInRange to
VT100Screen

2021-12-23: Move shouldExpectPromptMarks to
VT100ScreenState. Also fix the condition under which it is
restored from an arrangement, which seems to be due to an
accidental change in
69d2ec858f169f0f3540cb3f550eef2fd6b8c9b4

2021-12-23: Move mark-addding machiner of
screenPromptDidEndAtLine to VT100Screen+Mutation and make
call to API an async side-effect

2021-12-23: Add some todos

2021-12-23: Make redrawing the screen after adding a mark
into an async side-effect

2021-12-23: Move code to add marks into VT100Screen+Mutation

2021-12-23: Make the call to screenPromptDidStartAtLine:
into an async side effect. Here we go!

2021-12-23: Move code from screenPromptDidStartAtLine to
VT100Screen+Mutation.m

2021-12-23: Move iTermMarkDelegate to VT100Screen+Mutation

2021-12-23: Remove VT100ScreenDelegate.screenSessionGuid(),
add guid to VT100ScreenConfiguration.

2021-12-23: Add VT100ScreenSideEffects

2021-12-22: Remove _lastMark (it was an unnecessary
optimization) and fix some bugs: jumpToSavedScrollPosition
could jump to captured output; captured output would
interfere with setting the last command's end date;
currentMarkOrNotePosition would get updated for
non-navigable marks.

2021-12-22: Move lastPromptLine to VT100ScreenState

2021-12-22: Move fakePromptDetectedAbsLine to VT100Screen

2021-12-21: Process queued tokens immediately when exiting
copy mode

2021-12-21: Create VT100ScreenConfiguration to start
breaking blocking dependencies of VT100ScreenMutation on its
delegate

2021-12-21: Move VT100Screen resizing code to its own
category

2021-12-20: Move VT100TerminalDelegate into
VT100Screen+Mutation and fix a bunch of problems.

- Fix failing tests.  - Fix a bug in LineBuffer and
LineBlock where mayHaveDoubleWidthCharacter was not copied,
which broke searching over a DWC (since searches are now
done on a cow copy) - Fix some nullability warnings - Make
PTYTextView dataSource weak.  - Update textview's and text
drawing helper's reference to colorMap when textview's
datasource changes.

2021-12-20: Add comment

2021-12-20: Add missing accessor, fixes selecting output of
last command while not at shell prompt

2021-12-20: Move temporaryDoubleBuffer to VT100ScreenState

2021-12-20: Move colormap into VT100ScreenState

2021-12-20: Move colormap ownership to VT100Screen

2021-12-20: Move ownership of iTermColorMap to VT100Screen

2021-12-20: Move lastCommandMark to VT100ScreenState

2021-12-20: Move intervalTreeObserver to VT100ScreenState

2021-12-20: Move normalization to VT100ScreenState

2021-12-20: Move shellIntegrationInstalled to
VT100ScreenState

2021-12-20: Move appendToScrollbackWithStatusBar to
VT100ScreenState

2021-12-20: Move _trackCursorLineMovement to
VT100ScreenState

2021-12-20: Move lineBuffer to VT100ScreenState

2021-12-20: [colorpicker] Fix a race in -awakeFromNib.
Distressingly, it is called on a view controller before all
of its own views awake. Ensure CPKColorWell calls -load
before trying to use _view.

2021-12-19: Move cumulativeScrollbackOverflow to
VT100ScreenState

2021-12-19: Fix warning

2021-12-19: Move initialSize to VT100ScreenState

2021-12-19: Move protectedMode to VT100ScreenState

2021-12-19: Move shellIntegrationInstalled,
lastCommandOutputRange, currentPromptRange, and
startOfRunningCommandOutput to VT100ScreenState

2021-12-19: Move cursorVisible to VT100ScreenState

2021-12-19: Move saveToScrollbackInAlternateScreen to
VT100ScreenState

2021-12-19: Move lastExternalAttribute into VT100ScreenState

2021-12-19: Move _lastCharacterIsDoubleWidth to
VT100ScreenState

2021-12-19: Move _lastCharacter into VT100ScreenState

2021-12-19: Move charsetUsesLineDrawingMode to
VT100ScreenState

2021-12-18: Move tabStops into VT100ScreenState

2021-12-18: Move savedFindContextAbsPosition into
VT100ScreenState

2021-12-18: Move maxScrollbackLines into VT100ScreenState

2021-12-18: Remove unused ivar, markCacheRange_.

2021-12-18: Move markCache to VT100ScreenState

2021-12-18: Move command start coord to VT100ScreenState

2021-12-18: Move scrollbackOverflow into VT100ScreenState

2021-12-18: Move findContext into VT100ScreenState

2021-12-17: Remove dead code

2021-12-17: Extend simplified row height algo to
ProfileListView

2021-12-17: Fix toolbelt tableview row height calculation.
I'm now actually doing what Corbin Dunn suggests in
https://stackoverflow.com/a/8054170/321984. Works on macOS
12, might break on 10.14 so needs to be tested

2021-12-17: Move unlimitedScrollback into VT100State and add
some missing fields to its copy method

2021-12-17: Remove ansiMode, which was never implemented
besides round-tripping through DECRQM.

2021-12-17: Move wraparoundMode, ansi, and insert into
VT100ScreenState.

2021-12-17: Move terminal into VT100ScreenState

2021-12-17: Fix crash. When ARCifying I should not have
removed the call to invalidate and I should not have left an
object pointer as .

2021-12-17: Move saved interval tree into VT100ScreenState

2021-12-17: Fix some leaks and analyzer warnings

2021-12-17: Remove chatty NSLog

2021-12-17: Get rid of iterm_dealloc and ARCify some code

2021-12-17: Fix analyzer warnings, arcify some old code

2021-12-16: Fix more analyzer warnings

2021-12-16: Fix more analyzer warnings

2021-12-16: Fix some leaks found by the analyzer

2021-12-16: Fix analyzer warnings, mostly nullability

2021-12-16: To work around the pop-failure assertion whose
cause I cannot find, use a discardable copy of the line
buffer to append the grid to prior to performing a search.
Issue 10107

2021-12-16: ARCify VT100StateParser and make transition
references to states weak to fix spurious leak reports in
memory graph

2021-12-16: Fix leak of attributed strings in tabbar

2021-12-16: ARCify VT100Grid

2021-12-16: Fix leak

2021-12-16: Move the grids into VT100ScreenState

2021-12-16: Make interval tree copyable (but slow - I need
to optimize this) and add -copy to VT100ScreenMutableState.
Also fix a wrong assert in LineBlock

2021-12-16: Define VT100ScreenMutableState.copy

2021-12-16: Move intervalTree into VT100ScreenState

2021-12-16: Move order enforcers into VT100ScreenState

2021-12-16: Move copyString into VT100ScreenState

2021-12-16: Move animatedLines into VT100ScreenState

2021-12-16: Move lastBell into VT100ScreenState

2021-12-16: Move more state into VT100ScreenState

2021-12-16: Begin moving VT100Screen's state into a separate
class to make an immutable view of it.

2021-12-16: Add missing file

2021-12-15: Fix full screen notch inset when a menu bar is
visible (prefs > appearance > auto-hide menu bar in
non-native fullscreen is off). Also fix fullscreen window
frame dropping down when another display becomes active
(because NSApp.mainMenu.menuBarHeight is only accurate for
the 'active' screen). Issue 10080

2021-12-15: Fix metal renderer's badge frame, indicators
frame, and broadcast stripes quad when there is a per-pane
status bar or per-pane title bar (the MTKView sits under
them and their height must be taken into account). Issue
10092

2021-12-15: Add p3 support to Python API

2021-12-15: Add support for the P3 colorspace. This will
cause minor breakages because colors in control sequences
are now in P3 when enabled. Issue 9652

2021-12-15: Add support for P3 to ColorPicker

2021-12-14: Remove dead code

2021-12-14: Ensure no jiggle occurs while PTYSession is
being set up. Fix broken logic in
iTermColorMap.setColor:forKey: to prevent calling
colorMap:didChangeColorForKey: when nothing changed. Issue
10091

2021-12-14: Make iTermTipWindowController's window an
NSPanel. This allows new clicking on the dock to open a new
window when the tip is open (#455)


2021-12-14: Install rosetta before running Python API on ARM
macs

2021-12-14: When attaching to tmux if a window is 95%
offscreen move it to be entirely onscreen. Issue 10094

2021-12-13: Make jobs tool into a treeview. It shares the
same outline view as the status bar component. Add icons to
it. Issue 10096

2021-12-13: Fix bogus assertion

2021-12-13: Reduce sparklines graph status bar component
frame rate to limit window server CPU utilization. Issue
7410

2021-12-13: Add an advanced pref to draw window borders even
in dark mode. Issue 9965

2021-12-13: Make SGR 4 with no subparameter use single
underline. Issue 10102

2021-12-13: When the search field is first responder,
automatically search for text on the find pasteboard. Issue
10103

2021-12-13: Make 'save all profiles as JSON' preserve order
of the tableview. Issue 10105

2021-12-12: Fix various problems with PTYTextView's
visibleRect calculations.

- Fix scrollLineNumberRangeIntoView: because when the range
gave the last visible line it would scroll anyway.  - Fix
adjustedDocumentVisibleRect to never include the top margin,
as its callers (in particular textDrawingHelperVisibleRect)
expect it to do. Issue 9958 - Make PTYTextView.excess more
readable.  - Keep badge in place while scrolling through
history.  - Simplify calculation of topMarginRect in
drawTopMarginWithVirtualOffset:. Since _visibleRect is now
clearly defined as not including the top margin the
calculation is easy.

2021-12-09: Move most mutation code in VT100Screen into a
category

2021-12-09: Split LineBuffer non-mutating methods into
protocol

2021-12-09: Expand constness, immutability, and read-only
protocols to enable moving mutations off the main thread.

2021-12-09: Add immutable interfaces for VT100Grid,
iTermExternalAttributeIndex, VT100LineInfo, and
iTermMetadata

2021-12-09: Fix warning

2021-12-09: Fix warning

2021-12-08: Remove per-line generation tracking.

2021-12-08: Initial attempt at copy-on-write for LineBuffer

2021-12-07: Don't crash if CGDisplayModeGetRefreshRate
returns NULL. See
https://gitlab.com/gnachman/iterm2/-/issues/10028#note_755390693

2021-12-07: More const improvements for screen_char_t
pointers. Use ScreenCharArray everywhere instead of passing
screen_char_t pointers around. This lays the groundwork for
Swift to do useful work without dealing with unsafe
pointers.

2021-12-06: Improve const correctness for passing
screen_char_t pointers around

2021-12-06: Fix failing tests

2021-12-05: [tmux integration] Make send-keys tolerate
errors since it is inherently racy. There might be more bugs
here, pending debug log from issue 10085

2021-12-04: Add a pref to force an untitled window to open
at launch. Issue 10079

2021-12-03: Use NSProgressIndicator on macOS 12+ in the
hopes that it uses less energy than mine and that it has
stopped crashing when exiting full screen (which was the
motivation for having it in the first place). Issue 8640

2021-12-03: Change MTKTextureLoader's storage mode to avoid
a crash on macOS 10.14

2021-12-03: Add advanced prefs tmuxTitlePrefix and
tmuxIncludeClientNameInWindowTitle

2021-12-02: Add View > Disable transparency in key window

2021-12-02: Increase height of non-tag profile list view
rows to make them look better. I hate this dark magic.

2021-12-02: Add labels to default color picker accessory
buttons. Issue 10073

2021-12-02: Add makefile to simplify building ColorPicker

2021-12-02: Reset the width adjustment after applying it in
loadArrangement:named:sessions:partialAttachments: so it
doesn't get reapplied in didFinishRestoringWindow:. Do not
save a scroller width if the window is maximized since we
don't want to adjust it at all in that case upon a scroller
style change, preferring to keep it maximized per the logic
in scrollerStyleDidChange:. Issue 9946

2021-12-01: Fix hotkey windows overlapping notifications on
macOS 10

2021-12-01: Place floating hotkey panels below
notifications. Issue 10040

2021-12-01: Add makefile to SearchableComboListView

2021-12-01: Improvements to menu item selection, and add
Select Menu Item to pointer bindings. Issue 9781
