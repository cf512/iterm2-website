2021-12-31: Allow requesting speech recognition permission
(#456)


2021-12-27: Refactor triggers code to move evaluation into
its own class and action performing into PTYSession as a
delegate of the trigger evaluator. This is in preparation
for moving trigger evaluation into PTYSession and eventually
into the mutation thread.

2021-12-27: move use of delegate in
mutClearBufferSavingPrompt to side effect

2021-12-27: Reduce duplicate screenNeedsRedraw calls. Make
annotation removal use it

2021-12-27: Fix bugs related to removing annotations.
PTYNoteViewController must be removed from _notes when a
PTYAnnotation is removed from the interval tree. This can
happen if it goes out of range or the buffer is cleared.
Also, make PTYTextView.alphaValue=1 when annotations are
visible. I have no idea why they ever worked - macOS was
drawing subviews of an alpha=0 view.

2021-12-26: Various UI improvements for annotations: use a
better 'delete' icon; make the window grow when the text
view grows; confirm deletions.

2021-12-26: Break PTYAnnotation out of
PTYNoteViewController. It is the model object and belongs to
the interval tree. The view controller is its delegate.
PTYTextView owns the VCs while the IntervalTree owns the
models. PTYTextView is the delegate of
PTYNoteViewController.

2021-12-26: Move PTYNoteViewController.h to be with its .m
in the project file

2021-12-26: Move screenLogWorkingDirectoryAtLine to a
side-effect

2021-12-24: Make call to
screenGetWorkingDirectoryWithCompletion into a side-effect

2021-12-24: Move screenCommandDidEndWithRange partially into
the mutation path and make the rest a side-effect

2021-12-23: Move commandInRange and haveCommandInRange to
VT100Screen

2021-12-23: Move shouldExpectPromptMarks to
VT100ScreenState. Also fix the condition under which it is
restored from an arrangement, which seems to be due to an
accidental change in
69d2ec858f169f0f3540cb3f550eef2fd6b8c9b4

2021-12-23: Move mark-addding machiner of
screenPromptDidEndAtLine to VT100Screen+Mutation and make
call to API an async side-effect

2021-12-23: Add some todos

2021-12-23: Make redrawing the screen after adding a mark
into an async side-effect

2021-12-23: Move code to add marks into VT100Screen+Mutation

2021-12-23: Make the call to screenPromptDidStartAtLine:
into an async side effect. Here we go!

2021-12-23: Move code from screenPromptDidStartAtLine to
VT100Screen+Mutation.m

2021-12-23: Move iTermMarkDelegate to VT100Screen+Mutation

2021-12-23: Remove VT100ScreenDelegate.screenSessionGuid(),
add guid to VT100ScreenConfiguration.

2021-12-23: Add VT100ScreenSideEffects

2021-12-22: Remove _lastMark (it was an unnecessary
optimization) and fix some bugs: jumpToSavedScrollPosition
could jump to captured output; captured output would
interfere with setting the last command's end date;
currentMarkOrNotePosition would get updated for
non-navigable marks.

2021-12-22: Move lastPromptLine to VT100ScreenState

2021-12-22: Move fakePromptDetectedAbsLine to VT100Screen

2021-12-21: Process queued tokens immediately when exiting
copy mode

2021-12-21: Create VT100ScreenConfiguration to start
breaking blocking dependencies of VT100ScreenMutation on its
delegate

2021-12-21: Move VT100Screen resizing code to its own
category

2021-12-20: Move VT100TerminalDelegate into
VT100Screen+Mutation and fix a bunch of problems.

- Fix failing tests.  - Fix a bug in LineBuffer and
LineBlock where mayHaveDoubleWidthCharacter was not copied,
which broke searching over a DWC (since searches are now
done on a cow copy) - Fix some nullability warnings - Make
PTYTextView dataSource weak.  - Update textview's and text
drawing helper's reference to colorMap when textview's
datasource changes.

2021-12-20: Add comment

2021-12-20: Add missing accessor, fixes selecting output of
last command while not at shell prompt

2021-12-20: Move temporaryDoubleBuffer to VT100ScreenState

2021-12-20: Move colormap into VT100ScreenState

2021-12-20: Move colormap ownership to VT100Screen

2021-12-20: Move ownership of iTermColorMap to VT100Screen

2021-12-20: Move lastCommandMark to VT100ScreenState

2021-12-20: Move intervalTreeObserver to VT100ScreenState

2021-12-20: Move normalization to VT100ScreenState

2021-12-20: Move shellIntegrationInstalled to
VT100ScreenState

2021-12-20: Move appendToScrollbackWithStatusBar to
VT100ScreenState

2021-12-20: Move _trackCursorLineMovement to
VT100ScreenState

2021-12-20: Move lineBuffer to VT100ScreenState

2021-12-20: [colorpicker] Fix a race in -awakeFromNib.
Distressingly, it is called on a view controller before all
of its own views awake. Ensure CPKColorWell calls -load
before trying to use _view.

2021-12-19: Move cumulativeScrollbackOverflow to
VT100ScreenState

2021-12-19: Fix warning

2021-12-19: Move initialSize to VT100ScreenState

2021-12-19: Move protectedMode to VT100ScreenState

2021-12-19: Move shellIntegrationInstalled,
lastCommandOutputRange, currentPromptRange, and
startOfRunningCommandOutput to VT100ScreenState

2021-12-19: Move cursorVisible to VT100ScreenState

2021-12-19: Move saveToScrollbackInAlternateScreen to
VT100ScreenState

2021-12-19: Move lastExternalAttribute into VT100ScreenState

2021-12-19: Move _lastCharacterIsDoubleWidth to
VT100ScreenState

2021-12-19: Move _lastCharacter into VT100ScreenState

2021-12-19: Move charsetUsesLineDrawingMode to
VT100ScreenState

2021-12-18: Move tabStops into VT100ScreenState

2021-12-18: Move savedFindContextAbsPosition into
VT100ScreenState

2021-12-18: Move maxScrollbackLines into VT100ScreenState

2021-12-18: Remove unused ivar, markCacheRange_.

2021-12-18: Move markCache to VT100ScreenState

2021-12-18: Move command start coord to VT100ScreenState

2021-12-18: Move scrollbackOverflow into VT100ScreenState

2021-12-18: Move findContext into VT100ScreenState

2021-12-17: Remove dead code

2021-12-17: Extend simplified row height algo to
ProfileListView

2021-12-17: Fix toolbelt tableview row height calculation.
I'm now actually doing what Corbin Dunn suggests in
https://stackoverflow.com/a/8054170/321984. Works on macOS
12, might break on 10.14 so needs to be tested

2021-12-17: Move unlimitedScrollback into VT100State and add
some missing fields to its copy method

2021-12-17: Remove ansiMode, which was never implemented
besides round-tripping through DECRQM.

2021-12-17: Move wraparoundMode, ansi, and insert into
VT100ScreenState.

2021-12-17: Move terminal into VT100ScreenState

2021-12-17: Fix crash. When ARCifying I should not have
removed the call to invalidate and I should not have left an
object pointer as .

2021-12-17: Move saved interval tree into VT100ScreenState

2021-12-17: Fix some leaks and analyzer warnings

2021-12-17: Remove chatty NSLog

2021-12-17: Get rid of iterm_dealloc and ARCify some code

2021-12-17: Fix analyzer warnings, arcify some old code

2021-12-16: Fix more analyzer warnings

2021-12-16: Fix more analyzer warnings

2021-12-16: Fix some leaks found by the analyzer

2021-12-16: Fix analyzer warnings, mostly nullability

2021-12-16: To work around the pop-failure assertion whose
cause I cannot find, use a discardable copy of the line
buffer to append the grid to prior to performing a search.
Issue 10107

2021-12-16: ARCify VT100StateParser and make transition
references to states weak to fix spurious leak reports in
memory graph

2021-12-16: Fix leak of attributed strings in tabbar

2021-12-16: ARCify VT100Grid

2021-12-16: Fix leak

2021-12-16: Move the grids into VT100ScreenState

2021-12-16: Make interval tree copyable (but slow - I need
to optimize this) and add -copy to VT100ScreenMutableState.
Also fix a wrong assert in LineBlock

2021-12-16: Define VT100ScreenMutableState.copy

2021-12-16: Move intervalTree into VT100ScreenState

2021-12-16: Move order enforcers into VT100ScreenState

2021-12-16: Move copyString into VT100ScreenState

2021-12-16: Move animatedLines into VT100ScreenState

2021-12-16: Move lastBell into VT100ScreenState

2021-12-16: Move more state into VT100ScreenState

2021-12-16: Begin moving VT100Screen's state into a separate
class to make an immutable view of it.

2021-12-16: Add missing file

2021-12-15: Fix full screen notch inset when a menu bar is
visible (prefs > appearance > auto-hide menu bar in
non-native fullscreen is off). Also fix fullscreen window
frame dropping down when another display becomes active
(because NSApp.mainMenu.menuBarHeight is only accurate for
the 'active' screen). Issue 10080

2021-12-15: Fix metal renderer's badge frame, indicators
frame, and broadcast stripes quad when there is a per-pane
status bar or per-pane title bar (the MTKView sits under
them and their height must be taken into account). Issue
10092

2021-12-15: Add p3 support to Python API

2021-12-15: Add support for the P3 colorspace. This will
cause minor breakages because colors in control sequences
are now in P3 when enabled. Issue 9652

2021-12-15: Add support for P3 to ColorPicker

2021-12-14: Remove dead code

2021-12-14: Ensure no jiggle occurs while PTYSession is
being set up. Fix broken logic in
iTermColorMap.setColor:forKey: to prevent calling
colorMap:didChangeColorForKey: when nothing changed. Issue
10091

2021-12-14: Make iTermTipWindowController's window an
NSPanel. This allows new clicking on the dock to open a new
window when the tip is open (#455)


2021-12-14: Install rosetta before running Python API on ARM
macs

2021-12-14: When attaching to tmux if a window is 95%
offscreen move it to be entirely onscreen. Issue 10094

2021-12-13: Make jobs tool into a treeview. It shares the
same outline view as the status bar component. Add icons to
it. Issue 10096

2021-12-13: Fix bogus assertion

2021-12-13: Reduce sparklines graph status bar component
frame rate to limit window server CPU utilization. Issue
7410

2021-12-13: Add an advanced pref to draw window borders even
in dark mode. Issue 9965

2021-12-13: Make SGR 4 with no subparameter use single
underline. Issue 10102

2021-12-13: When the search field is first responder,
automatically search for text on the find pasteboard. Issue
10103

2021-12-13: Make 'save all profiles as JSON' preserve order
of the tableview. Issue 10105

2021-12-12: Fix various problems with PTYTextView's
visibleRect calculations.

- Fix scrollLineNumberRangeIntoView: because when the range
gave the last visible line it would scroll anyway.  - Fix
adjustedDocumentVisibleRect to never include the top margin,
as its callers (in particular textDrawingHelperVisibleRect)
expect it to do. Issue 9958 - Make PTYTextView.excess more
readable.  - Keep badge in place while scrolling through
history.  - Simplify calculation of topMarginRect in
drawTopMarginWithVirtualOffset:. Since _visibleRect is now
clearly defined as not including the top margin the
calculation is easy.

2021-12-09: Move most mutation code in VT100Screen into a
category

2021-12-09: Split LineBuffer non-mutating methods into
protocol

2021-12-09: Expand constness, immutability, and read-only
protocols to enable moving mutations off the main thread.

2021-12-09: Add immutable interfaces for VT100Grid,
iTermExternalAttributeIndex, VT100LineInfo, and
iTermMetadata

2021-12-09: Fix warning

2021-12-09: Fix warning

2021-12-08: Remove per-line generation tracking.

2021-12-08: Initial attempt at copy-on-write for LineBuffer

2021-12-07: Don't crash if CGDisplayModeGetRefreshRate
returns NULL. See
https://gitlab.com/gnachman/iterm2/-/issues/10028#note_755390693

2021-12-07: More const improvements for screen_char_t
pointers. Use ScreenCharArray everywhere instead of passing
screen_char_t pointers around. This lays the groundwork for
Swift to do useful work without dealing with unsafe
pointers.

2021-12-06: Improve const correctness for passing
screen_char_t pointers around

2021-12-06: Fix failing tests

2021-12-05: [tmux integration] Make send-keys tolerate
errors since it is inherently racy. There might be more bugs
here, pending debug log from issue 10085

2021-12-04: Add a pref to force an untitled window to open
at launch. Issue 10079

2021-12-03: Use NSProgressIndicator on macOS 12+ in the
hopes that it uses less energy than mine and that it has
stopped crashing when exiting full screen (which was the
motivation for having it in the first place). Issue 8640

2021-12-03: Change MTKTextureLoader's storage mode to avoid
a crash on macOS 10.14

2021-12-03: Add advanced prefs tmuxTitlePrefix and
tmuxIncludeClientNameInWindowTitle

2021-12-02: Add View > Disable transparency in key window

2021-12-02: Increase height of non-tag profile list view
rows to make them look better. I hate this dark magic.

2021-12-02: Add labels to default color picker accessory
buttons. Issue 10073

2021-12-02: Add makefile to simplify building ColorPicker

2021-12-02: Reset the width adjustment after applying it in
loadArrangement:named:sessions:partialAttachments: so it
doesn't get reapplied in didFinishRestoringWindow:. Do not
save a scroller width if the window is maximized since we
don't want to adjust it at all in that case upon a scroller
style change, preferring to keep it maximized per the logic
in scrollerStyleDidChange:. Issue 9946

2021-12-01: Fix hotkey windows overlapping notifications on
macOS 10

2021-12-01: Place floating hotkey panels below
notifications. Issue 10040

2021-12-01: Add makefile to SearchableComboListView

2021-12-01: Improvements to menu item selection, and add
Select Menu Item to pointer bindings. Issue 9781
