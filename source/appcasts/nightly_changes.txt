2021-11-15: Add debug logging for applescript setting
background images

2021-11-15: Fix ordering of command history

2021-11-15: Make sorting of command history entries
configurable by advanced prefs and make age a slightly
stronger factor in sorting. Issue 10031

2021-11-11: When closing the last tmux tab in a window offer
to detach. Issue 7203

2021-11-11: Fix capture GPU frame when textures have 16 bit
color depth

2021-11-06: Make deselected tab color alpha controllable by
advanced pref. Add advanced pref for colors in tab color
menu item. See mailing list thread with subject line 'tab
colors'.

2021-11-05: Don't require a semicolon in OSC parser. Issue
10014

2021-11-05: Reading user defaults can cause
advancedSettingsDidChange: (wtf) so if it happens off the
main thread dispatch to main to avoid using NSViewController
on the wrong thread

2021-11-04: Fix blending in metal plus various differences
between it and the legacy renderer.

A TREATISE ON METAL AND COLOR SPACES

THE FACTS * NSView blends in the colorspace of its enclosing
window. For example, if you paint srgb(255, 0, 0,
25%)=xdr(234, 51, 35, 25%)=SD(255, 0, 8, 25%) over srgb(64,
64, 64)=xdr(64, 64, 64)=SD(56, 56, 56) the result dependson
the screen. On pro display, you get xdr(107, 61,
57)=srgb(114, 58, 55) and on SD you get SD(105, 41,
43)=srgb(114, 50, 50).  * NSWindow has a colorspace, but
changing it tickles bugs in the window server (FB9316904).
* Because window colorspaces are effectively immutable,
blending of non-images in drawRect: always happen in the
screen's colorspace. Maybe that makes sense: how else would
you blend srgb(x) over p3(y)? It's arbitrary.  * An NSImage
has a colorspace that affects how blending happens.  * When
you programatically create an NSImage, it seems to be in the
colorspace of your main display. Or best display? I'm not
sure. Regardless, you should draw into it with the
colorspace you really want (probably sRGB for iTerm2 today,
although P3 would be nice in the future).  * For Metal, you
have to convert images to the screen's colorspace using
bitmapImageRepByConvertingToColorSpace:renderingIntent: in
order to actually change the raw data correctly
(CGImageCreateCopyWithColorSpace doesn't seem to change raw
values; it just re-tags it). This can be done just before
turning it into a texture.  * Like drawing in images, in
drawRect: you can draw with the colorspace you like (sRGB
typically for me) and don't think about it otherwise.  * In
Metal, convert your colors (typically in sRGB) to the
screen's colorspace when going from NSColor ->
vector_float4.  * MTKView has a colorspace that affects how
blending happens. In order for it to behave like NSView,
make its colorspace equal the window's colorspace.
Thankfully you can change MTKView's colorspace without
reprocussions. I think that if I didn't care about matching
drawRect:, I could set this to sRGB and get saner blending
behavior.

** THE GOLDEN RULE OF METAL ** Shaders operate in the color
space of the screen. All their inputs and outputs that
relate to colors should be in the display's color space.

Detailed list of changes in this commit:

* Arcify iTermBadgeLabel * Enable whole-module optimization
* Appease xcode 13 * Fix blending in Metal.  * Add atop
blending mode for metal which is a better match for how
drawRect: blends.  * Don't force textures to be BGRA8Unorm.
Many of them (especially programatically generated) will
have 16-bit float representations.  * Background stripes in
GPU now don't extend into margins.  * Refactor mark drawing
to reduce duplication and ensure pixel-perfect match between
gpu and legacy code.  * Fix a bug in GPU timestamps where
there could be rounding errors in the iTermTimestampKey.date
field that would cause discrepancies with the legacy
renderer. Use the string representation to compare for
equality.  * Fix a bug where the GPU rendered timestamps
would shift right under a legacy scroller.  * Fix
it_verticallyFlippedImage to preserve the resolution of the
bitmap and output floats (not BGRA8).  * Add -[NSView
enclosingWindowDidMoveToScreen:] * Simplify drawing badge
labels to apply alpha at text rendering time rather than as
a separate step.  * Draw cursor guide in IME text * Hide
regular cursor in copy mode in legacy renderer.  * Fix font
smoothing discrepancy between legacy and GPU timestamps *
Fix vertical orientation of timestamps discrepancy

FAQ Q: Do I feel bad about such a big commit?  A: No. For
individual commits, see the metal_colorspaces branch.

2021-10-31: Fix flashing white line. See
https://twitter.com/satefan/status/1454894566381916167?s=20.
Issue 9199

2021-10-29: Fix delete color preset. Issue 10009

2021-10-29: Add comment to remind me to update it2tip

2021-10-29: Add it2tip

2021-10-28: Make ED not erase marks unless the last token
was CSI 1 ; 1 H (CUP). Issue 10006

2021-10-28: Fix file descriptor leak and assertion failure
in HTTP connection because the retain/release infra was not
adpoted everywhere. closing also needs to be synchronized
together with fd to avoid a race.

2021-10-28: When scroller style changes don't adjust
window's frame if it's presently maximized to its screen's
visible frame. Issue 9946

2021-10-28: Fix taking a snapshot of a view (such as when
dragging a tab) which seems to have been broken by
iTermBackgroundColorView

2021-10-27: Add advanced pref to increase minimal tab text
legibility

2021-10-27: Fix wrong placeholder text in subtitle field.
Issue 6850

2021-10-27: Visual improvements to the tab bar, mostly for
Monterey.

- Improve appearance of subtitles in Minimal - Fix color of
line between top tabbar and content on Monterey - Remove
undesriable line between minimal left-side tabs and content
- Remove undesirable shadows in left-side tabs on Big Sur
and Monterey - Remove undesriable bottom line in bottom
tabs, move it to the top.

2021-10-27: Add rate limit to alerts and notification
triggers. Issue 9999

2021-10-27: Add advanced pref for custom split pane divider
colors. Issue 9991

2021-10-27: Move CPU governing into pidinfo. Since it
fetches git state in a child process, it makes way more
sense for it to suspend/resume than for the main process to
do so. Furthermore, doing `kill` in the main process seems
to slow down random things like adding observers or CF hash
tables in general (issue 9986). And sadly I was using the
wrong signal (TSTP) instead of STOP so CPU governing didn't
do squat. I have verified that it actually works now.
Additionally, fetching recent branches is no longer subject
to CPU governing since it is requested by a user and should
be as fast as possible.

2021-10-27: Bump version to 3.5

2021-10-26: Make auto log folder an interpolated string.
Issue 9947

2021-10-26: Wait an extra spin of the runloop before
assuming that the system is done calling
PseudoTerminalRestorer. Fixes an assertion failure that was
probably due to a race between the restoration driver's
completion and the last such call.

2021-10-26: In nonnative full screen, add a black rectangle
to the top if there's a notch. Issue 10002

2021-10-25: Introduce 'add tab on right' to tab context
menu. Issue 9994

2021-10-23: Add graphic_emacs files that were missed in a
previous commit

2021-10-23: When adding new tabs adjacent to the current
one, close tab should take you to the previous (not next)
tab. Issue 9994

2021-10-22: Add an optional shadow to vertical and
horizontal cursors to improve visibility. See private email
with subject line 'ITerm2 Smart box cursor color issue'

2021-10-22: Turn debug logging for timers back on in beta
and log notification center observers to debug log

2021-10-22: Remove notification center observation for
debugging in iTermTimerProxy. It's causing performance
problems, although I'd be a little surprised if this fixes
it. Issue 9306

2021-10-22: Enable subtitles in the regular theme. Allow
setting subtitle with OSC (0 or 1) (title newline subtitle).
Issue 6850

2021-10-21: Fix tab icons for emacs and python by adding a
noramlization step that removes version number/arch stuff
from the executable's name. Add an emacs icon, inspired by
the macOS icon.

2021-10-21: Enable subtitles in regular theme when tab bar
is at least 28 pts high. Add a UI for enabling the taller
tab bar. This was done to avoid breaking existing
arrangements while providing a path toward a standard-height
tabbar. Issue 6850

2021-10-21: Update shell integration

2021-10-21: Make [LineBuffer initWithDictionary] return an
empty line buffer if the dictionary is broken to avoid being
left without a line buffer at all.

2021-10-21: Fix ubsan warning

2021-10-21: Don't call CPU governor off the main queue.
Fixes a data race

2021-10-21: Rebuild BetterFontPicker.framework with release
Xcode 13

2021-10-21: Fix a race between async writes and closing the
file descriptor. Issue 9992

2021-10-21: [python] Remove max websocket payload size.
Issue 9992. Bump python version.

2021-10-21: Desperate attempt to prevent leak of gitpoller.
Issue 9950, 9986

2021-10-20: Improve performance of DLog in swift. Issue 9941

2021-10-20: Increase length of title in snippets to 256.
Issue 9966

2021-10-20: Detect when a hotkey window is opening over
another app's full screen window and leave space at the top
for the menu bar. If you don't, the OS pushes the window
down to make room. Issue 9978

2021-10-20: Correct grammar (#453)


2021-10-20: Treat control-shift-dash as control-underscore
in modify other keys mode 1. See email with subject line
'Change in key behavior, latest nightly build'

2021-10-19: Fix warnings

2021-10-19: Fix cmd-e cmd-g with status bar before revealing
temporary find view

2021-10-19: Fix tooltip for cursor blink pref

2021-10-19: Add NSPrefersDisplaySafeAreaCompatibilityMode

2021-10-19: Add setting to disable DEC(RE)SET 12 (blink
cursor). Emacs turns this on by default (terminfo cvvis) and
it's a break with past behavior. And blinking things are
annoying so it's off by default. Mentioned by Aaron M. on
Twitter 10/18/21.

2021-10-18: Promote password probe setting to menu in
password manager. Issue 9972

2021-10-18: Fix bound keystrokes while filtering/zooming.
Issue 9976

2021-10-18: Fix data race in metal renderer (private queue
used same external attributes index as main queue, which
mutates it concurrently). Issue 9989

2021-10-15: Send esc+nul for C-M-Space. Issue 9962

2021-10-14: Turn off automatic everything substitution in
edit snippets value. It was turned off in IB, no idea why
that didn't work. Issue 9987

2021-10-14: Fix a bug where tmux integration didn't work
with tmux 1.8

2021-10-14: Send C-Space to tmux for null since it doesn't
handle 0x0 correctly. Issue 9963

2021-10-14: Enlarge text field for actions that take string
params. Issue 9967

2021-10-14: Show display title in snippets menu rather than
title (i.e., use the value if the title is empty)

2021-10-14: Add 'compose' action to open composer with text.
Issue 9966

2021-10-13: Perform a one-shot tail find when you do
find-next or find-previous to pick up anything new. Issue
9964.

2021-10-13: Stop filtering if the status bar is removed

2021-10-13: Fix a bug where the status bar filter component
didn't get a progress bar.

Make textview first responder after filtering stops.

Reset progress when stopping filtering to avoid a
half-complete progress bar when opening the search field
subsequently.

Visual improvements in drop down view so filter field
matches search field on 10.16.

2021-10-13: [filter] Remove verbatim updater. It was slow
because it handled the whole session contents synchronously.
Empty queries now cancel filtering. Issue 9979

2021-10-12: Initialize scroller style for issue 9946

2021-10-12: Change DA2 xterm version to 2500. This gives
ideal behavior in both vim and emacs.

2021-10-12: Exclude arrow keys, page up, page down, home,
end and delete from numeric keypad for key mapping. This
fixes arrow keys in vim

2021-10-12: Implement tertiary DA. Update DA1 to 369.
Implement DECNLS response for DECRQSS. Change default VT
level to 400. YOLO

2021-10-11: Implement SPA, EPA, DECSCA, DECSERA, DECSED, and
DECSEL. Report selective erase support in DECRQSS.

Split enumerateCellsInRect into a mutable & immutable
methods.

Fix a bug where Primary DA would respond when the parameter
is not 0.

2021-10-11: Move URL out of screen_char_t and in to
iTermExternalAttributes.

This required adding a migration path from the now-legacy
screen_char_t that had a URL code to the modern one that has
16 bits of unused space. This was motivated by the desire to
support the protected attribute and to add new attributes
more easily in the future. This also gets us 32-bit URL
codes, which ought to be enough for anyone. I also fixed a
bug where NSURLs were saved in VT100Terminal's restorable
state when OSC 8 is in effect (rare, but breaks decoding).
Fix a crash when VT100Grid fails to import a broken
restorable state dictionary. Update DVR to import/export
external attributes. Fix a bug in iTermURLStore that used up
codes unnecessarily quickly.

2021-10-11: Don't crash if we fail to restore the primary
grid from restorable state.

2021-10-11: Add Setulc (underline color support) to my fork
of xterm-256color

2021-10-09: Implement DECSACE

2021-10-09: Implement DECERA. Fix default rectangles for
other rectangle sequences

2021-10-09: Implement DECFRA

2021-10-09: Fix save/restore external attributes on grid

2021-10-09: Implement DECCRA

2021-10-08: Implement DECRARA, my favorite name for a
control sequence

2021-10-08: Implement DECCARA. Add an inverse flag to
screen_char_t so we know which cells are inverse video to
make DECCARA work right.

2021-10-08: Add support for double underline to HTML logs

2021-10-08: Implement DECIC, DECDC

2021-10-08: Implement DECSNLS

2021-10-08: Add support for DECSPP reporting to DECRQSS

2021-10-08: - Implement XTPUSHSGR and XTPOPSGR - Implement
DECSCPP - Fix DECCOLM to reset margins on change and to
preserve the cursor's position.

2021-10-08: Implement most of DEC DSR

2021-10-08: Add support for SGR 21 (double underline)

2021-10-08: Add support for DECSET 1047 and 1048.

2021-10-08: Add support for DECSET 1016 (SGR Pixel mode)

2021-10-08: Add support for DECSET 1007 (alternate screen
mode)

2021-10-08: Add support for DECNCSM (decset 95) - do not
clear screen when DECCOLM is set/reset

2021-10-08: Add DECSET 12 (blinking cursor)

2021-10-07: Update the response to primary DA and start
adding support for VT level 400

2021-10-07: Fix application keypad mode (it was broken by
adding keymappers because it needs to run pre-cocoa but I
hadn't tested it for lack of a keypad at the time). Add
DEC[RE]SET 66. Make it work in modifyOtherKeys modes. Send
modifiers.

2021-10-07: Add support for CSI a

2021-10-07: Accept CSI ` (HPA) as a synonym for CSI G (CHA)

2021-10-07: Add support for CSI ^ to scroll down.

2021-10-07: Fix some warnings

2021-10-07: Add support for XTSMGRAPHICS

2021-10-07: Implement xterm's push/pop/report colors.

2021-10-06: Add support for SR (shift right)

2021-10-06: Add support for SL (Shift left).

2021-10-06: Fix a bug where scroll regions got corrupted
weirdly (leaving illegal values) after a resize.

2021-10-06: Add support XTSETTCAP. Change how XTGETTCAP
works for TN, which now returns the termcap name (e.g.,
xterm-new) rather than the terminal emulator name. This will
probably break some people's scripts. They can use another
test, such as whether you get a response for iTerm2Profile
instead of TN.

2021-10-06: Add support for DECRSPS

2021-10-06: Add support for DECRQPSR

2021-10-06: Remove debugging code

2021-10-06: Attach save panel to the presenting window

2021-10-06: Add DECSLPP. DECRQSS improvements. DECRQCRA
update.

- Add support for DECSLPP.  - Fix DECRQCRA to use the first
arg for the request ID to work with modern esctest.  -
Implement most of DECRQSS.

2021-10-05: Add support for DECBI

2021-10-05: Add support for DECFI

2021-10-04: Various improvements to sending key events.

- Function keys now communicate modifiers when TERM starts
with `xterm`.  - Rewrite modify other keys mode=1 to fix a
lot of problems. Issue 9962.  - Control-backspace now sends
c-h - Fix various other weird edge cases I spotted in xterm
(c-m-backspace sends CSI; meta+special control (i.e., c-2 or
c-6) now does esc + special control)

2021-10-03: Add some guardrails for the toolbelt font
setting to avoid a crash. Issue 9940

2021-10-02: Fix a bug where cmd-enter wouldn't toggle
fullscreen for a hotkey window when native fullscreen was
enabled. Issue 9949

2021-10-02: Fix a bug where the ligature warning was shown
for fonts that have default ligatures (currently none) or
fonts that don't support ligatures and it wasn't updated
when changing fonts

2021-10-02: ESC c now restores profile colors to the values
from the underlying profile. Since OSC 4 can change them
it's only fair that you can reset them. This might cause
problems if people are manually tweaking their profiles and
expecting it to stick, but restoring values to the last
human-set color would introduce gobs of complexity. Issue
9948

2021-10-01: Only hide tabbar backing's visual effect view
when in the minimal theme. Fixes a bug where the regular
theme with a transparent window would have no backing,
making tabs transparent.

2021-10-01: Rebuild terminfo with old tic

2021-10-01: Add interpolated string for autolog filename.
Issue 9947
