2021-11-30: Make the server refuse to build when ubsan is
enabled

2021-11-28: Show indicator when secure keyboard entry is
enabled. Issue 10004

2021-11-28: Warn about Monterey breakages when enable secure
keyboard entry. Issue 10035, 10004.

2021-11-27: Fix frame of hotkey window when opening over an
iTerm2 Lion fullscreen window.
https://gitlab.com/gnachman/iterm2/-/issues/10066#note_743278556

2021-11-27: Quote multi-word labels in issue templates

2021-11-27: Update labels for issue templates. Issue 10065

2021-11-27: Work around a bug in MTKTextureLoader that
prevented mark images from being loaded.

I once met the man who wrote MTKView, and I missed my chance
to share my feelings. I may go to the grave with this
regret, but at least I didn't make a scene.

2021-11-25: Add NSScrollView+iTerm.swift which was somehow
missed a few days ago

2021-11-25: Make NSRect comparison in
scrollerStyleDidChange: sloppy. Issue 9946

2021-11-24: Make nonnative fullscreen windows and floating
top-of-screen hotkey windows avoid the notch

2021-11-24: Fix safe area insets for notch displays.

2021-11-24: Add support for greater than 120hz updates.
Requires an ARM mac to ensure we don't cause problems on
Intel machines. Issue 10028

2021-11-23: When prepending a default scheme to a
user-supplied URL for URL actions, include //. A URL must
have either one or two slashes, and using neither caused
NSURL and NSURLComponents to be confused and percent-encode
the hashmark. Issue 10062

2021-11-23: Fix crash when main display causes
NSImage.lockFocus to produce ARGB instead of RGBA/BGRA. Also
fix a bug where the cursor guide created a new texture for
each frame.

2021-11-23: Fix a crash when a textview has no window

2021-11-22: Improve logging for resizing PTYSplitView

2021-11-22: Fix wrong titlebar color. Cherrypick this to
3.4.14.

2021-11-22: Remove unneeded availability checks

2021-11-22: Add 'convert matches to selections'. Issue 10049

2021-11-22: Fix a bug where 'Duplicate Tab' would duplicate
the current tab, not the one whose context menu item was
selected. Issue 10048

2021-11-21: Tweak horizontal insets of toolbelt table views
for macOS 10.x

2021-11-21: Make toolbelt tables look good.

Factor out common tableview code. Use NSTableCellView, which
fixes vertical alignment problems mentioned in issue 10027.

2021-11-19: Revert "Add
NSPrefersDisplaySafeAreaCompatibilityMode"

This reverts commit
139e1d44630688034372d59128c2c8ba89c055aa.

2021-11-19: Restore window title when disintering a buried
session. Issue 10041

2021-11-18: If non-native fullscreen windows preserve the
menu bar then lower floating hotkey windows' levels to below
the menu bar so notification center remains visible. Issue
10040

2021-11-18: Fix full keyboard access. Issue 10023

2021-11-18: Fix failing tests. Add golden test for issue
10038

2021-11-18: Fix discrepancy between legacy and GPU
renderer's horizontal position for composed characters.
Issue 10038

2021-11-17: Hold shift to make toolbelt send string to
composer instead of advanced paste. Issue 9966

2021-11-17: When you select Advanced Paste in the large
composer, copy its contents, dismiss it, and open advanced
paste.

2021-11-17: Fix crash if there is no remotehost or pwd when
doing a smart selection action

2021-11-17: Fix drawing on 10.12. Also fix a bug where the
search field didn't get first responder after typing when
tableview was first responder.

2021-11-17: Add support for interpolated strings to smart
selection actions. Issue 10036

2021-11-16: ARCify the iTerm2 target

2021-11-16: Move a couple files to the iTerm2SharedArc
target from the iTerm target

2021-11-16: Turn off mouse movement tracking when it isn't
needed to reduce background CPU utilization. Issue 8640

2021-11-16: Hide per-window background image when there is a
per-pane background image. Improve logging of
iTermImatgeView and iTermImageWrapper for email from
Antoine.

2021-11-15: Add debug logging for applescript setting
background images

2021-11-15: Fix ordering of command history

2021-11-15: Make sorting of command history entries
configurable by advanced prefs and make age a slightly
stronger factor in sorting. Issue 10031

2021-11-11: When closing the last tmux tab in a window offer
to detach. Issue 7203

2021-11-11: Fix capture GPU frame when textures have 16 bit
color depth

2021-11-06: Make deselected tab color alpha controllable by
advanced pref. Add advanced pref for colors in tab color
menu item. See mailing list thread with subject line 'tab
colors'.

2021-11-05: Don't require a semicolon in OSC parser. Issue
10014

2021-11-05: Reading user defaults can cause
advancedSettingsDidChange: (wtf) so if it happens off the
main thread dispatch to main to avoid using NSViewController
on the wrong thread

2021-11-04: Fix blending in metal plus various differences
between it and the legacy renderer.

A TREATISE ON METAL AND COLOR SPACES

THE FACTS * NSView blends in the colorspace of its enclosing
window. For example, if you paint srgb(255, 0, 0,
25%)=xdr(234, 51, 35, 25%)=SD(255, 0, 8, 25%) over srgb(64,
64, 64)=xdr(64, 64, 64)=SD(56, 56, 56) the result dependson
the screen. On pro display, you get xdr(107, 61,
57)=srgb(114, 58, 55) and on SD you get SD(105, 41,
43)=srgb(114, 50, 50).  * NSWindow has a colorspace, but
changing it tickles bugs in the window server (FB9316904).
* Because window colorspaces are effectively immutable,
blending of non-images in drawRect: always happen in the
screen's colorspace. Maybe that makes sense: how else would
you blend srgb(x) over p3(y)? It's arbitrary.  * An NSImage
has a colorspace that affects how blending happens.  * When
you programatically create an NSImage, it seems to be in the
colorspace of your main display. Or best display? I'm not
sure. Regardless, you should draw into it with the
colorspace you really want (probably sRGB for iTerm2 today,
although P3 would be nice in the future).  * For Metal, you
have to convert images to the screen's colorspace using
bitmapImageRepByConvertingToColorSpace:renderingIntent: in
order to actually change the raw data correctly
(CGImageCreateCopyWithColorSpace doesn't seem to change raw
values; it just re-tags it). This can be done just before
turning it into a texture.  * Like drawing in images, in
drawRect: you can draw with the colorspace you like (sRGB
typically for me) and don't think about it otherwise.  * In
Metal, convert your colors (typically in sRGB) to the
screen's colorspace when going from NSColor ->
vector_float4.  * MTKView has a colorspace that affects how
blending happens. In order for it to behave like NSView,
make its colorspace equal the window's colorspace.
Thankfully you can change MTKView's colorspace without
reprocussions. I think that if I didn't care about matching
drawRect:, I could set this to sRGB and get saner blending
behavior.

** THE GOLDEN RULE OF METAL ** Shaders operate in the color
space of the screen. All their inputs and outputs that
relate to colors should be in the display's color space.

Detailed list of changes in this commit:

* Arcify iTermBadgeLabel * Enable whole-module optimization
* Appease xcode 13 * Fix blending in Metal.  * Add atop
blending mode for metal which is a better match for how
drawRect: blends.  * Don't force textures to be BGRA8Unorm.
Many of them (especially programatically generated) will
have 16-bit float representations.  * Background stripes in
GPU now don't extend into margins.  * Refactor mark drawing
to reduce duplication and ensure pixel-perfect match between
gpu and legacy code.  * Fix a bug in GPU timestamps where
there could be rounding errors in the iTermTimestampKey.date
field that would cause discrepancies with the legacy
renderer. Use the string representation to compare for
equality.  * Fix a bug where the GPU rendered timestamps
would shift right under a legacy scroller.  * Fix
it_verticallyFlippedImage to preserve the resolution of the
bitmap and output floats (not BGRA8).  * Add -[NSView
enclosingWindowDidMoveToScreen:] * Simplify drawing badge
labels to apply alpha at text rendering time rather than as
a separate step.  * Draw cursor guide in IME text * Hide
regular cursor in copy mode in legacy renderer.  * Fix font
smoothing discrepancy between legacy and GPU timestamps *
Fix vertical orientation of timestamps discrepancy

FAQ Q: Do I feel bad about such a big commit?  A: No. For
individual commits, see the metal_colorspaces branch.
